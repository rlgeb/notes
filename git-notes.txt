--general use--

git clone "repo_url"
    -makes a copy to the repo in locally

git commit
    -commits the changes made locally
    --amend : changes the previous commit to be the current one(overrides it)

git log
    -displays the commit history
    --not other_branch_name show commits not in branch
    - double dot syntax: can do git log branch1..branch2 to see which commits are in branch1 and not branch2
    note: this is the same as git log branch2 --not branch1
    - triple dot: git log branch1...branch2 all references reachable by either branch but not both. --left-right
    will show you which side the commit is in.
 
gitk
    - tool for deeper log dive

git status
    -changes to be commited, shows chnages not staged for commit, untracked files

git add "file_name"
    -addes the file_name to the changes to be commited section
    -use -i option to add interatively.
    -user -p option for patch to stage parts of files
    
git checkout "file_name"
    -checkouts out the file_name from the master
    -can use this to revert to the last commited version of a file

git reset HEAD "file_name"
    -resets the HEAD pointer to the previous version of the file
    -esentially the same as above, used to revert to last committed version

git diff "file_name"
    -shows the changes to a file since the last commit

git stash
    -saves you current directory state for later

git stash pop
    -restores all of the changes that you made

git stash list
    -shows all of your stashes 

git stash drop
    - drops the last stash you made

git commit --amend
  - drops you into a text editor to change your commit message.


git push "remove_name" "branch_name"
    - empty push to trigger service hook

git merge "branch_name"
    -do a git checkout master and then merge and fix confilcts

git rebase "branch_name"
    -apply commited changes on 1 branch & replay them on another 1. Do not 
    rebase commits that you have pushed to a public repo!!
    -i HEAD~# for interactive mode here as well, which lets you stop after each commit 
    you want to modify and change the message, add files or whatever else. Note that this
    will rewirte every commit the the # range even if you don't change anything. you will run git rebase --continue 
    to move to the next commit and git commit --amend to change things
    -squash: combines commits
git branch -D "branch_name"
    -delete a branch locally

git push :branch_name 
    -delete a remote branch

git cherry-pick "commit_hash"
    -pull commits from a different branch into the one you are on.

--tagging--
marker (ptr) for a version in git that cannont change use them to checkout or for creating branches

git tag
    -list all tags

git tag -a "name_of_tag" -m "message"
    -create annotated tag, no -a will create a lightweight tag, -s creates a signed tag

git show "tag_name"
    -see tag and commit data

git push "remote_name" "tag_name"
    -you have to push tags if you want to share them


--forking--
1. go to the git repo online and click the fork button
2. this creates a cloud copy of the repo for you to make changes to
3. once you are done go back to your fork of repo and select the branch you pushed 
4. click the pull button to submit a pull request 

git remote -v
    -lists all of the remote repos

git remote fetch "remote_name"
    -changes remote in use

git remote add "remote_name" "remote_url"
    -addes the remote 

git remote rm "remote_name"
    -removes the remote

git push "remote_name" "branch_name"
    -pushes the changes of branch_name to remote_name
    -f : push forcefully.  use if cloud and local get out of
    sync, like if you use --ammend on a commit.

git fetch "remote_name"
    -goes out and get all the new branches for the remote


misc 

git reflog
    -log kept by git of where your HEAD and references have been for the last few months

HEAD^ & HEAD~ 
    -both mean first parent.  you can also chain them like HEAD^^^ or HEAD~3.

git filter-branch
    -use to rewrite large amounts of history

git blame -L "line-range"
    -show annotations

